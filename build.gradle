
plugins {
    id 'java'
    id 'idea'
    id 'net.ltgt.apt-idea' version '0.13'
    id "com.github.opengl-BOBO.assertjGen2" version "2.0.0"
    id 'maven-publish'
}
/*
 * TODO: Fix bug running gradle build a second time producing the error below
 * 
 * Execution failed for task ':assertjGen'.
 * > org/junit/rules/TestRule
 * 
 * WORK AROUND: use gradle clean build
 * 
 */
sourceCompatibility = '1.8'
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

// NetBeans will automatically add "run" and "debug" tasks relying on the
// "mainClass" property. You may however define the property prior executing
// tasks by passing a "-PmainClass=<QUALIFIED_CLASS_NAME>" argument.
//
// Note however, that you may define your own "run" and "debug" task if you
// prefer. In this case NetBeans will not add these tasks but you may rely on
// your own implementation.
if (!hasProperty('mainClass')) {
    ext.mainClass = 'zw.org.mohcc.dhis.DHISMetaDataMonitor'
}

repositories {
    mavenCentral()
    // You may define additional repositories, or even remove "mavenCentral()".
    // Read more about repositories here:
    // http://www.gradle.org/docs/current/userguide/dependency_management.html#sec:repositories
}

dependencies {
    // TODO: Add dependencies here ...
    // You can read more about how to add dependency here:
    // http://www.gradle.org/docs/current/userguide/dependency_management.html#sec:how_to_declare_your_dependencies
    compile 'com.sparkjava:spark-core:2.3'
    compile group: 'com.mashape.unirest', name: 'unirest-java', version: '1.4.9'
    // https://mvnrepository.com/artifact/org.eclipse.jgit/org.eclipse.jgit
    compile 'org.eclipse.jgit:org.eclipse.jgit:4.9.1.201712030800-r'
    // https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-core
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.9.2'
    
    compile 'com.squareup.okhttp3:okhttp:3.9.1'
    // https://mvnrepository.com/artifact/commons-io/commons-io
    compile 'commons-io:commons-io:2.4'
    compile 'commons-beanutils:commons-beanutils:1.9.3'
    compile 'com.google.dagger:dagger:2.14.1'
    apt 'com.google.dagger:dagger-compiler:2.14.1'
    
    compile 'com.jayway.jsonpath:json-path:2.4.0'
    
    // https://mvnrepository.com/artifact/javax.mail/mail
    compile 'javax.mail:mail:1.4.1'
        
    // https://mvnrepository.com/artifact/commons-cli/commons-cli
    compile 'commons-cli:commons-cli:1.4'

    compile 'com.github.wumpz:diffutils:2.2'

    compile 'com.mitchellbosecke:pebble:2.1.0'

    compileOnly 'org.projectlombok:lombok:1.16.18'
    apt "org.projectlombok:lombok:1.16.18"
     
    testCompile group: 'junit', name: 'junit', version: '4.9'
    testCompile 'org.assertj:assertj-core:3.8.0'
}


//create a single Jar with all dependencies
task fatJar(type: Jar) {
    manifest {
        attributes 'Implementation-Title': title, 
        	'Implementation-Version': version,
        	'Main-Class': mainClassFile
    }
    baseName = project.name + '-all'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

fatJar {
    exclude 'META-INF/*.SF'
    exclude 'META-INF/*.DSA'
    exclude 'META-INF/*.RSA'
}

artifacts {
    archives fatJar
}

sourceSets {
    test {
        java {
            srcDirs assertjGen.resolveTargetDir(project)
        }
    }
    //    main {
    //        java {
    //            srcDirs = ['build/generated/source/apt/main','src/main/java']
    //        }
    //    }
}

assertjGen {
    classes = ['zw.org.mohcc.dhis.apiclient.DHISQuery'
        , 'zw.org.mohcc.dhis.apiclient.Field'
        , 'zw.org.mohcc.dhis.apiclient.Filter'
        , 'zw.org.mohcc.dhis.gitclient.GitClient'
        , 'zw.org.mohcc.dhis.gitclient.GitProcessingFailedException'
        , 'zw.org.mohcc.dhis.monitor.MonitorConfig'
        , 'zw.org.mohcc.dhis.monitor.DataSetGroupConfig']

    entryPointClassPackage = 'zw.org.mohcc.dhis'
    generateAssertionsForAllFields = true

}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId 'zw.org.mohcc.dhis'
            artifactId 'dhis-metadata-monitor'
            version '1.0-SNAPSHOT'
            from components.java
        }
    }
}

idea {
    project {
        // experimental: whether annotation processing will be configured in the IDE; only actually used with the 'idea' task.
        configureAnnotationProcessing = true
    }
    module {
        apt {
            // whether generated sources dirs are added as generated sources root
            addGeneratedSourcesDirs = true
            // whether the apt and testApt dependencies are added as module dependencies
            addAptDependencies = true

            // The following are mostly internal details; you shouldn't ever need to configure them.
            // whether the compileOnly and testCompileOnly dependencies are added as module dependencies
            addCompileOnlyDependencies = false // defaults to true in Gradle < 2.12
            // the dependency scope used for apt and/or compileOnly dependencies (when enabled above)
            mainDependenciesScope = "PROVIDED" // defaults to "COMPILE" in Gradle < 3.4, or when using the Gradle integration in IntelliJ IDEA
        }
    }
}
